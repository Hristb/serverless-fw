service: pizzaApp

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    REGION: ${self:provider.region}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "sqs:SendMessage"
          Resource:
            Fn::GetAtt: [PendingOrderQueue, Arn]
        - Effect: "Allow"
          Action:
            - "sqs:SendMessage"
          Resource:
            Fn::GetAtt: [OrdersToSendQueue, Arn]
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:GetItem"
          Resource:
            Fn::GetAtt: [OrderTable, Arn]  

functions:
  newOrder:
    handler: handler.newOrder
    environment:
      PENDING_ORDERS_QUEUE:
        Ref: PendingOrderQueue
      ORDERS_TABLE:
        Ref: OrderTable
    events:
      - httpApi:
          path: /order
          method: post
  
  getOrder:
    handler: handler.getOrder
    environment:
      ORDERS_TABLE:
        Ref: OrderTable
    events:
      - httpApi:
           path: /order/{id}
           method: get

  prepOrder:
    handler: handler.prepOrder
    environment:
      ORDERS_TABLE:
        Ref: OrderTable
    events:
      - sqs:
          arn:
            Fn::GetAtt: [PendingOrderQueue, Arn]  
          batchSize: 1
  sendOrder:
    handler: handler.sendOrder
    environment:
      ORDERS_TO_SEND_QUEUE:
        Ref: OrdersToSendQueue

resources:
  Resources:
    PendingOrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: pendingOrdersQueue
    OrdersToSendQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ordersToSendQueue
    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1